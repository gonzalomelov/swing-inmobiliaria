/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import DataTypes.DataCasa;
import Interface.Fabrica;
import Interface.IControladorCasas;
import Interface.IControladorDatos;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author gonza
 */
public class PropiedadLista extends javax.swing.JInternalFrame {

    /**
     * Creates new form PropiedadLista
     */
    public PropiedadLista(String modo) {
        initComponents();
        
        this.modo = modo;
        this.idPropiedadSeleccionada = "";
        
        if (this.modo.equals("ConsultarPropiedad")){
            this.setTitle("Consultar Propiedad");
            this.jButtonAceptar.setText("Ver Detalles");
        } else if (this.modo.equals("BajaPropiedad")){
            this.setTitle("Baja Propiedad");
            this.jButtonAceptar.setText("Eliminar");
        } else if (this.modo.equals("ModificarPropiedad")){
            this.setTitle("Modificar Propiedad");
            this.jButtonAceptar.setText("Modificar");
        }
        
        Fabrica fab = new Fabrica();
        IControladorCasas icc = fab.getIControladorCasas();
        List<DataCasa> listaPropiedades = icc.listarCasas();
        
        this.actualizarTablaPropiedades(listaPropiedades);
        
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(this.jTablePropiedades.getModel());
        jTablePropiedades.setRowSorter(sorter);
    }

    // Caso Ver Propiedades de Solicitud
    public PropiedadLista(List<DataCasa> listaPropiedades){
        initComponents();
        
        this.modo = "ConsultarPropiedadesDeSolicitud";
        this.idPropiedadSeleccionada = "";
        
        this.setTitle("Consultar Propiedades que cumplen la Solicitud");
        this.jButtonAceptar.setText("Ver Detalles");
        
        this.actualizarTablaPropiedades(listaPropiedades);
        
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(this.jTablePropiedades.getModel());
        jTablePropiedades.setRowSorter(sorter);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePropiedades = new javax.swing.JTable();
        filtro = new javax.swing.JTextField();
        jButtonAceptar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setTitle("Lista de Propiedades");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Propiedades"));

        jTablePropiedades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Identificador", "Operacion", "Tipo", "Zona", "Direccion", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablePropiedades.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTablePropiedades);

        filtro.setText("Buscar...");
        filtro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                filtroFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                filtroFocusLost(evt);
            }
        });
        filtro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filtroKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(filtro, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButtonAceptar.setText("jButtonAceptar");
        jButtonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAceptarActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cerrar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButton1.setText("Imprimir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAceptar)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCancelar))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAceptar)
                    .addComponent(jButtonCancelar)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAceptarActionPerformed
        this.idPropiedadSeleccionada = "";
        for (int i=0; i<this.jTablePropiedades.getRowCount(); i++){
            if (this.jTablePropiedades.isRowSelected(i)){
                
                this.idPropiedadSeleccionada = (String) this.jTablePropiedades.getRowSorter().getModel().
                        getValueAt(this.jTablePropiedades.getRowSorter().convertRowIndexToModel(i), 0);
                
                break;
            }
        }
        
        if (this.idPropiedadSeleccionada.equals("")){
            JOptionPane.showMessageDialog(this, "Debe seleccionar una propiedad","Info",JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        Fabrica fab = new Fabrica();
        IControladorCasas icc = fab.getIControladorCasas();
        
        if (modo.equals("BajaPropiedad")){
            int respuesta;
            respuesta = JOptionPane.showConfirmDialog(this, "Esta seguro que desea eliminar la propiedad?", "Eliminar Propiedad", 0);
            if (respuesta == 0){
                // Quiere eliminar la propiedad
                try{
                    icc.bajaCasa(this.idPropiedadSeleccionada);
                    JOptionPane.showMessageDialog(this, "Propiedad eliminada con exito","Exito",JOptionPane.INFORMATION_MESSAGE);
                    this.actualizarTablaPropiedades(icc.listarCasas());
                    this.idPropiedadSeleccionada = "";
                }
                catch (Exception exc){
                    JOptionPane.showMessageDialog(this, exc.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                }
            } else if (respuesta == 1){
                // No la quiere eliminar
                JOptionPane.showMessageDialog(this, "No se ha eliminado la propiedad","Info",JOptionPane.INFORMATION_MESSAGE);
            }
        } else if (modo.equals("ModificarPropiedad") || modo.equals("ConsultarPropiedad") || modo.equals("ConsultarPropiedadesDeSolicitud")){
            PropiedadInfo ifPropiedadInfo;
            ifPropiedadInfo = new PropiedadInfo(this.modo,this.idPropiedadSeleccionada, this.idClienteSolicitudSugerida);
            this.getDesktopPane().add(ifPropiedadInfo);
            ifPropiedadInfo.setVisible(true);
        }
    }//GEN-LAST:event_jButtonAceptarActionPerformed

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        javax.swing.JDesktopPane desktopPane =  this.getDesktopPane();
        desktopPane.remove(this);
        desktopPane.updateUI();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void filtroFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filtroFocusGained
        if (filtro.getText().equals("Buscar...")){
            filtro.setText("");
        }
    }//GEN-LAST:event_filtroFocusGained

    private void filtroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filtroFocusLost
        if (filtro.getText().equals("")){
            filtro.setText("Buscar...");
        }
    }//GEN-LAST:event_filtroFocusLost

    private void filtroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtroKeyReleased
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(this.jTablePropiedades.getModel());
        jTablePropiedades.setRowSorter(sorter);
        String i = "(?i)";
        String texto= i.concat(this.filtro.getText());
        if (texto.length() == 4) {
            sorter.setRowFilter(null);
        } else {
            try{
                sorter.setRowFilter(RowFilter.regexFilter(texto));
            }
            catch(Exception exc){
                sorter.setRowFilter(null);
            }
        }
    }//GEN-LAST:event_filtroKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Fabrica fab = new Fabrica();
        IControladorDatos icd = fab.getIControladorDatos();
        icd.imprimirJTable(this.jTablePropiedades,"Propiedades");
    }//GEN-LAST:event_jButton1ActionPerformed

    public final void actualizarTablaPropiedades(List<DataCasa> listaPropiedades){
        DefaultTableModel modTablaPropiedades = (DefaultTableModel)this.jTablePropiedades.getModel();
        
        while(modTablaPropiedades.getRowCount()>0)
            modTablaPropiedades.removeRow(0);
            
        for (DataCasa dataC : listaPropiedades){
            Object[] row = new Object[this.jTablePropiedades.getColumnCount()];
            
            row[0] = dataC.getId();
            
            
            if (dataC.getEstado().equals("alquiler"))
                row[1] = "Alquiler";
            else if (dataC.getEstado().equals("venta"))
                row[1] = "Venta";
            else if (dataC.getEstado().equals("ambos"))
                row[1] = "Venta y Alquiler";
            
            if (dataC.getTipo().equals("casa"))
                row[2] = "Casa";
            else if (dataC.getTipo().equals("terreno"))
                row[2] = "Terreno";
            
            row[3] = dataC.getZona();
            row[4] = dataC.getDireccion();
            
            if (dataC.getEstado().equals("ambos"))
                row[5] = dataC.getPrecioV();
            else if (dataC.getEstado().equals("alquiler"))
                row[5] = dataC.getPrecioA();
            else if (dataC.getEstado().equals("venta"))
                row[5] = dataC.getPrecioV();
            
            modTablaPropiedades.addRow(row);
        }
        this.jTablePropiedades.setModel(modTablaPropiedades);
        
        /*final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(this.jTablePropiedades.getModel());
        jTablePropiedades.setRowSorter(sorter);
        filtro.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent arg0) {
                String i = "(?i)";
                String texto= i.concat(filtro.getText());

                if (texto.length() == 4) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter(texto));
                }
            }
            @Override
            public void keyReleased(KeyEvent arg0) {
                String i = "(?i)";
                String texto= i.concat(filtro.getText());
                    if (texto.length() == 4) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter(texto,1));
                }
            }
            @Override
            public void keyPressed(KeyEvent arg0) {
                String i = "(?i)";
                String texto= i.concat(filtro.getText());

                if (texto.length() == 4) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(RowFilter.regexFilter(texto,1));
                }
            }
         });*/
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField filtro;
    private javax.swing.JButton jButton1;
    public javax.swing.JButton jButtonAceptar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablePropiedades;
    // End of variables declaration//GEN-END:variables

    // modo = "ModificarPropiedad" | "ConsultarPropiedad" | "BajaPropiedad" | "ConsultarPropiedadesDeSolicitud"
    private String modo;
    private String idPropiedadSeleccionada;
    public int idClienteSolicitudSugerida;
}
