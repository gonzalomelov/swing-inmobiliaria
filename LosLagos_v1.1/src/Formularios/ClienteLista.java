/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Formularios;

import DataTypes.DataCliente;
import Interface.Fabrica;
import Interface.IControladorClientes;
import Interface.IControladorDatos;
import java.awt.Component;
import java.util.List;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author gonza
 */
public class ClienteLista extends javax.swing.JInternalFrame {
    /**
     * Creates new form ClienteLista
     */
    public ClienteLista(String modo) {
        initComponents();
        
        this.modo = modo;
        this.idClienteSeleccionado = -1;
        
        if (this.modo.equals("ConsultarCliente")){
            this.setTitle("Consultar Cliente");
            this.jButtonAceptar.setText("Ver Detalles");
        } else if (this.modo.equals("BajaCliente")){
            this.setTitle("Baja Cliente");
            this.jButtonAceptar.setText("Eliminar");
        } else if (this.modo.equals("ModificarCliente")){
            this.setTitle("Modificar Cliente");
            this.jButtonAceptar.setText("Modificar");
        } else if (this.modo.equals("SeleccionClienteSolicitud")){
            this.setTitle("Asociar Cliente a Solicitud");
            this.jButtonAceptar.setText("Asociar a Solicitud");
        }
        
        this.actualizarTablaClientes();
        
        this.jTableListaClientes.getColumnModel().removeColumn(this.jTableListaClientes.getColumnModel().getColumn(0));
        
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(this.jTableListaClientes.getModel());
        jTableListaClientes.setRowSorter(sorter);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableListaClientes = new javax.swing.JTable();
        filtro = new javax.swing.JTextField();
        jButtonAceptar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setTitle("Listar Clientes");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Clientes"));

        jTableListaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "Apellido", "Telefono", "Celular", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableListaClientes.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jTableListaClientes);

        filtro.setText("Buscar...");
        filtro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                filtroFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                filtroFocusLost(evt);
            }
        });
        filtro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filtroKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(filtro, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jButtonAceptar.setText("jButton1");
        jButtonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAceptarActionPerformed(evt);
            }
        });

        jButtonCancelar.setText("Cerrar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButton1.setText("Imprimir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAceptar)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonCancelar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancelar)
                    .addComponent(jButtonAceptar)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        javax.swing.JDesktopPane desktopPane =  this.getDesktopPane();
        desktopPane.remove(this);
        desktopPane.updateUI();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAceptarActionPerformed
        this.idClienteSeleccionado = -1;
        for (int i=0; i<this.jTableListaClientes.getRowCount(); i++){
            if (this.jTableListaClientes.isRowSelected(i)){
                int modelIndex = this.jTableListaClientes.getRowSorter().convertRowIndexToModel(i);
                this.idClienteSeleccionado = (Integer) this.jTableListaClientes.getRowSorter().getModel().getValueAt(modelIndex, 0);
                break;
            }
        }
        
        if (this.idClienteSeleccionado == -1){
            JOptionPane.showMessageDialog(this, "Debe seleccionar un cliente","Info",JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        Fabrica fab = new Fabrica();
        IControladorClientes icc = fab.getIControladorClientes();
        
        if (modo.equals("SeleccionClienteSolicitud")){
            Component[] ventanas = this.getDesktopPane().getComponents();
            for (Component ventana: ventanas){
                if (ventana instanceof SolicitudInfo){
                    SolicitudInfo solInfo = (SolicitudInfo)ventana;
                    DataCliente dc;
                    try{
                        dc = icc.obtenerCliente(this.idClienteSeleccionado);
                        solInfo.actualizarInfoContacto(dc);
                        JOptionPane.showMessageDialog(this, "Cliente seleccionado exitosamente","Exito",JOptionPane.INFORMATION_MESSAGE);
                        JDesktopPane desktopPane = this.getDesktopPane();
                        desktopPane.remove(this);
                        desktopPane.updateUI();
                        return;
                    }
                    catch (Exception exc){
                        JOptionPane.showMessageDialog(this, exc.getMessage(),"Error",0);
                    }
                }
            }
            
        } else if (modo.equals("BajaCliente")){
            int respuesta;
            respuesta = JOptionPane.showConfirmDialog(this, "Esta seguro que desea eliminar el cliente?\n"+
                    "Se eliminaran todas las solicitudes que este tenga asociadas.", "Eliminar Cliente", JOptionPane.INFORMATION_MESSAGE);
            if (respuesta == 0){
                // Quiere eliminar el cliente
                try{
                    System.out.println(this.idClienteSeleccionado);
                    icc.bajaCliente(this.idClienteSeleccionado);
                    JOptionPane.showMessageDialog(this, "Cliente eliminado con exito","Exito",JOptionPane.INFORMATION_MESSAGE);
                    this.actualizarTablaClientes();
                    this.idClienteSeleccionado = -1;
                }
                catch (Exception exc){
                    JOptionPane.showMessageDialog(this, exc.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
                }
            } else if (respuesta == 1){
                // No lo quiere eliminar
                JOptionPane.showMessageDialog(this, "No se ha eliminado el cliente","Info",JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            ClienteInfo ifClienteInfo;
            ifClienteInfo = new ClienteInfo(this.modo,this.idClienteSeleccionado);
            this.getDesktopPane().add(ifClienteInfo);
            ifClienteInfo.setVisible(true);
        }
    }//GEN-LAST:event_jButtonAceptarActionPerformed

    private void filtroFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filtroFocusGained
        if (filtro.getText().equals("Buscar...")){
            filtro.setText("");
        }
    }//GEN-LAST:event_filtroFocusGained

    private void filtroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_filtroFocusLost
        if (filtro.getText().equals("")){
            filtro.setText("Buscar...");
        }
    }//GEN-LAST:event_filtroFocusLost

    private void filtroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtroKeyReleased
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(this.jTableListaClientes.getModel());
        jTableListaClientes.setRowSorter(sorter);
        
        String i = "(?i)";
        String texto= i.concat(this.filtro.getText());
        if (texto.length() == 4) {
            sorter.setRowFilter(null);
        } else {
            try{
                sorter.setRowFilter(RowFilter.regexFilter(texto));
            }
            catch(Exception exc){
                sorter.setRowFilter(null);
            }
            
            
        }
    }//GEN-LAST:event_filtroKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Fabrica fab = new Fabrica();
        IControladorDatos icd = fab.getIControladorDatos();
        icd.imprimirJTable(this.jTableListaClientes,"Clientes");
    }//GEN-LAST:event_jButton1ActionPerformed

    public final void actualizarTablaClientes(){
        Fabrica fab = new Fabrica();
        IControladorClientes icc = fab.getIControladorClientes();
        List<DataCliente> listaClientes = icc.listarClientes();
        
        DefaultTableModel modTablaCliente = (DefaultTableModel)this.jTableListaClientes.getModel();
        
        // TODO Tabla no editable
        while(modTablaCliente.getRowCount()>0)
            modTablaCliente.removeRow(0);
            
        for (DataCliente dataC : listaClientes){
            Object[] row = {dataC.getId(),dataC.getNombre(),dataC.getApellido(),
                dataC.getTelefono(),dataC.getCelular(),dataC.getEmail()};
            
            modTablaCliente.addRow(row);
        }
        this.jTableListaClientes.setModel(modTablaCliente);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField filtro;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAceptar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableListaClientes;
    // End of variables declaration//GEN-END:variables
    
    // modo = "ModificarCliente" | "ConsultarCliente" | "BajaCliente" | "SeleccionClienteSolicitud"
    private String modo;
    private int idClienteSeleccionado;
}
